# -*- coding: utf-8 -*-
"""UBER_ANALYSIS_jan-feb.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bYZF6AkVr5zU5qyYutwBmxvoSVPuE42u
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

data = pd.read_csv("/content/Uber-Jan-Feb-FOIL.csv")

data.head()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

data = pd.read_csv("/content/Uber-Jan-Feb-FOIL.csv")

# Check if all values in the "Date/Time" column have the same format
date_time_format = data["date"][0].split()[0]
all_same_format = all(date_time_format == dt.split()[0] for dt in data["date"])

# Print the result
print(f"All values in the 'Date/Time' column have the same format: {all_same_format}")

# Group data by base number and count the number of trips
trips_by_base = data.groupby("dispatching_base_number")[["trips"]].count()

# Find the base number with the most trips
most_trips_base = trips_by_base["trips"].idxmax()

# Print the results
print(f"Base number {most_trips_base} had the most trips in the month with {trips_by_base.loc[most_trips_base, 'trips']} trips.")

trips_from_B02512 = data[data["dispatching_base_number"] == "B02512"]["trips"].sum()

print(f"Total trips dispatched from B02512: {trips_from_B02512}")

# convert the dates to their respective days as per the calender

from datetime import datetime

# Convert the "Date/Time" column to datetime objects
data["date"] = pd.to_datetime(data["date"])

# Extract the day of the week from the datetime objects
data["day_of_week"] = data["date"].dt.day_name()

# Print the first five rows of the dataframe
data.head(10)

#make the most sensible plot for the values of days against active cars and the axis showing days should represented Mon, Tue, Wed, Thurs, Fri, Sat, Sun, for the respective days

# Group data by day of the week and count the number of active cars
active_cars_by_day = data.groupby("day_of_week")["active_vehicles"].mean()

# Reindex the data to ensure days are in the desired order
active_cars_by_day = active_cars_by_day.reindex(["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"])

# Create the plot
plt.figure(figsize=(10, 6))
sns.barplot(x=active_cars_by_day.index, y=active_cars_by_day.values)
plt.xlabel("Day of Week")
plt.ylabel("Average Number of Active Cars")
plt.title("Average Number of Active Cars by Day of Week")
plt.show()

# Group data by day and count the number of active cars
active_cars_by_day = data.groupby("day_of_week")["active_vehicles"].sum()

# Reindex the data to ensure days are in the desired order
active_cars_by_day = active_cars_by_day.reindex(["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"])


# Plot the number of active cars by day
sns.lineplot(data=active_cars_by_day)
plt.xlabel("Day")
plt.ylabel("Number of Active Cars")
plt.title("Number of Active Cars by Day")
plt.show()

# Create a pivot table with base numbers as rows and day of the week as columns, showing the number of trips for each combination
trips_by_base_day = data.pivot_table(index="dispatching_base_number", columns="day_of_week", values="trips", aggfunc="sum")

# Create a heatmap of the pivot table
plt.figure(figsize=(12, 6))
sns.heatmap(trips_by_base_day, cmap="YlGnBu")
plt.xlabel("Day of Week")
plt.ylabel("Base Number")
plt.title("Heatmap of Trips by Base and Day")
plt.show()

trips_by_base = data.groupby("dispatching_base_number")["trips"].sum()

print(trips_by_base)

# Sort the trips_by_base in descending order
sorted_trips_by_base = trips_by_base.sort_values(ascending=False)

# Create a bar chart
plt.figure(figsize=(12, 6))
sns.barplot(x=sorted_trips_by_base.index, y=sorted_trips_by_base.values)
plt.xlabel("Base Number")
plt.ylabel("Number of Trips")
plt.title("Total Trips by Dispatching Base (Descending Order)")
plt.show()

# Group data by day and count the number of trips
trips_by_day = data.groupby("date")["trips"].sum()

# Create a line chart
plt.figure(figsize=(12, 6))
sns.lineplot(data=trips_by_day)
plt.xlabel("Date")
plt.ylabel("Number of Trips")
plt.title("Daily Trip Trends")
plt.show()

# Group data by day and count the number of trips
trips_by_day = data.groupby("date")["trips"].sum()

# Sort the trips_by_day in descending order
sorted_trips_by_day = trips_by_day.sort_values(ascending=False)

# Get the top 5 peak days
top_5_peak_days = sorted_trips_by_day.index[:5]

# Plot the number of trips by day
plt.figure(figsize=(12, 6))
sns.lineplot(data=trips_by_day)
plt.xlabel("Date")
plt.ylabel("Number of Trips")
plt.title("Daily Trip Trends")

# Add red dotted lines to indicate the top 5 peak days
for peak_day in top_5_peak_days:
    plt.axvline(x=peak_day, color="red", linestyle="--")

plt.legend(["Number of Trips", "Top 5 Peak Days"])
plt.show()

# Group data by day of the week and count the number of trips
trips_by_day = data.groupby("day_of_week")["trips"].sum()

# Find the day with the most trips
most_trips_day = trips_by_day.idxmax()

# Print the result
print(f"Most trips were dispatched on {most_trips_day} with {trips_by_day[most_trips_day]} trips.")

# prompt: summarize the above inferences

# Summary of inferences:

# 1. Data Consistency:
#    - All values in the "Date/Time" column have the same format.

# 2. Most Trips by Base Number:
#    - Base number B02512 had the most trips in the month.
#    - B02512 dispatched a total of 112120 trips.

# 3. Average Active Cars by Day:
#    - The average number of active cars varied throughout the week.
#    - Saturday had the highest average number of active cars.

# 4. Total Trips by Dispatching Base:
#    - There was significant variation in the number of trips dispatched by different bases.
#    - B02512 and B02764 dispatched the most and least number of trips, respectively.

# 5. Daily Trip Trends:
#    - There was a clear upward trend in the number of trips over time.
#    - January 13th was the peak day with the most trips.
#    - The top 5 peak days were identified.

# 6. Most Trips by Day of the Week:
#    - Friday was the day with the most trips dispatched.

# Overall, the analysis revealed interesting patterns and variations in Uber trip data for the month of January and February.